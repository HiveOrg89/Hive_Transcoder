name: Deploy and Create AMI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Schedule maintenance
      run: |
        # Invoke lambda with schedule maintenance function
        aws lambda invoke --function-name ${{ secrets.AWS_SCHEDULER_LAMBDA_ARN }} --invocation-type Event --cli-binary-format raw-in-base64-out --payload "{\"under_maintenance\":true}" response.json

    - name: Retrieve the current AMI so we can remove and create a new one
      run: |
        # Retrieve the ImageId of the launch template
        previous_ami_id=$(aws ec2 describe-launch-template-versions --launch-template-id lt-0de5977b4f1add85d --query "LaunchTemplateVersions[0].LaunchTemplateData.ImageId" --output text)

        #Retrieve snapshot_id
        snapshot_id=$(aws ec2 describe-images --image-ids $previous_ami_id --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" --output text)

        # store this in environment variable
        echo "PREVIOUS_AMI_ID=$previous_ami_id" >> $GITHUB_ENV
        echo "PREVIOUS_SNAPSHOT_ID=$snapshot_id" >> $GITHUB_ENV


    - name: Start EC2 instance
      id: start_instance
      run: |
        instance_id="${{ secrets.AWS_BASE_INSTANCE_ID }}"
        aws ec2 start-instances --instance-ids $instance_id
        echo "Instance started: $instance_id"
        aws ec2 wait instance-running --instance-ids $instance_id

    - name: Execute commands via SSM
      run: |
        instance_id="${{ secrets.AWS_BASE_INSTANCE_ID }}"
        token="${{ secrets.SECRET_GITHUB_TOKEN }}"
        command="export HOME=/root && cd /root && pm2 stop 0 && rm -rf Hive_Transcoder && git clone https://$token@github.com/HiveOrg89/Hive_Transcoder && cd Hive_Transcoder && npm install && pm2 start 0 && pm2 save"
        aws ssm send-command --instance-ids $instance_id --document-name "AWS-RunShellScript" --parameters 'commands=["'"$command"'"]'

    - name: Create AMI from EC2 instance
      id: create_ami
      run: |
        instance_id="${{ secrets.AWS_BASE_INSTANCE_ID }}"
        ami_name="Hive_Transcoder-$(date +%Y%m%d%H%M%S)"
        ami_id=$(aws ec2 create-image --instance-id $instance_id --name $ami_name --no-reboot --query 'ImageId' --output text)
        echo "AMI Created: $ami_id"
        echo "ami_id=$ami_id" >> $GITHUB_ENV
        echo "old_ami=$ami_id" >> $GITHUB_ENV  # Save this AMI ID for future reference

    - name: Wait for AMI to be ready
      run: |
        ami_id="${{ env.ami_id }}"
        aws ec2 wait image-available --image-ids $ami_id
        echo "AMI $ami_id is ready"

    - name: Update Launch Template with new AMI
      run: |
        ami_id="${{ env.ami_id }}"
        launch_template_name="transcoder_template"

        # Get the latest version number of the launch template
        latest_version=$(aws ec2 describe-launch-templates --launch-template-names $launch_template_name \
          --query 'LaunchTemplates[0].LatestVersionNumber' --output text)

        echo "Latest launch template version: $latest_version"

        # Create a new version of the launch template with the updated AMI
        new_template_version=$(aws ec2 create-launch-template-version \
          --launch-template-name $launch_template_name \
          --source-version $latest_version \
          --launch-template-data "{\"ImageId\":\"$ami_id\"}" \
          --query 'LaunchTemplateVersion.VersionNumber' --output text)

        echo "New launch template version created: $new_template_version"

        # Set the new version as the default for the launch template
        aws ec2 modify-launch-template \
          --launch-template-name $launch_template_name \
          --default-version $new_template_version

        echo "Launch template updated to use AMI: $ami_id with version: $new_template_version"

    - name: Deregister Previous AMI if exists
      run: |
        # Retrieve the ImageId of the launch template
        previous_ami_id="${{ env.PREVIOUS_AMI_ID }}"

        # Check if the previous AMI ID exists
        if [ -n "$previous_ami_id" ]; then
          echo "Deregistering previous AMI: $previous_ami_id"
          
          # Deregister the AMI
          aws ec2 deregister-image --image-id $previous_ami_id
          echo "Previous AMI $previous_ami_id deregistered"
        else
          echo "No previous AMI to deregister."
        fi

    - name: Delete old Snapshot
      run: |      
          # Retrieve the snapshot ID associated with the AMI
          snapshot_id="${{ env.PREVIOUS_SNAPSHOT_ID }}"
          
          # Deregister the snapshot if it exists
          if [ -n "$snapshot_id" ]; then
            echo "Deregistering snapshot: $snapshot_id"
            aws ec2 delete-snapshot --snapshot-id $snapshot_id
            echo "Snapshot $snapshot_id deleted"
          else
            echo "No snapshot associated with AMI $previous_ami_id"
          fi

    - name: Stop EC2 instance
      run: |
        instance_id="${{ secrets.AWS_BASE_INSTANCE_ID }}"
        aws ec2 stop-instances --instance-ids $instance_id
        aws ec2 wait instance-stopped --instance-ids $instance_id

    - name: Revert to Normal Operation
      run: |
        # Invoke lambda with schedule maintenance function
        aws lambda invoke --function-name ${{ secrets.AWS_SCHEDULER_LAMBDA_ARN }} --invocation-type Event --cli-binary-format raw-in-base64-out --payload "{\"under_maintenance\":false}" response.json


